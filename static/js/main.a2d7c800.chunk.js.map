{"version":3,"sources":["components/navbar.js","components/jumbotron.js","components/cards.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","Jumbotron","counter","totalCounter","CardBody","onClick","incrementButton","id","alt","src","Counter","state","clicked","image1","image2","image3","image4","image5","image6","image7","image8","image9","clickedFunction","console","log","resetGame","setState","e","target","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2d7c800.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction NavBar(props) {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <span className=\"navbar-brand mb-0 h1\">Clicky Game!</span>\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4 text-center\">Clicky Game!</h1>\n                <p className=\"lead text-center\">Click on an image to earn points, but don't click on an image more than once!</p>\n                <p className=\"display-4 text-center\">Score: {props.counter} | Top Score: {props.totalCounter}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction CardBody(props) {\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image1\" alt=\"...\" className=\"cartoonImg\" src=\"https://upload.wikimedia.org/wikipedia/en/thumb/3/3b/SpongeBob_SquarePants_character.svg/1200px-SpongeBob_SquarePants_character.svg.png\"></img>\n                </div>\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image2\" alt=\"...\" className=\"cartoonImg\" src=\"https://upload.wikimedia.org/wikipedia/en/thumb/3/33/Patrick_Star.svg/1200px-Patrick_Star.svg.png\"></img>\n                </div>\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image3\" alt=\"...\" className=\"cartoonImg\" src=\"https://upload.wikimedia.org/wikipedia/en/thumb/8/8f/Squidward_Tentacles.svg/1200px-Squidward_Tentacles.svg.png\"></img>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image4\" alt=\"...\" className=\"cartoonImg\" src=\"https://vignette.wikia.nocookie.net/familyguyfanon/images/0/02/Stewie_Griffin.png/revision/latest?cb=20161119043926\"></img>\n                </div>\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image5\" alt=\"...\" className=\"cartoonImg\" src=\"https://i.pinimg.com/originals/a8/d8/cd/a8d8cd1903ed8d0b8aa20f398772210f.jpg\"></img>\n                </div>\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image6\" alt=\"...\" className=\"cartoonImg\" src=\"https://www.dailynews.com/wp-content/uploads/migration/2013/201311/ENTERTAINMENT_131129553_AR_0_NUHUWAQGMDGE.jpg?w=535\"></img>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image7\" alt=\"...\" className=\"cartoonImg\" src=\"https://vignette.wikia.nocookie.net/rocketpower/images/2/2c/Otto_on_skatebored.png/revision/latest/scale-to-width-down/340?cb=20180927131542\"></img>\n                </div>\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image8\" alt=\"...\" className=\"cartoonImg\" src=\"https://vignette.wikia.nocookie.net/rocketpower/images/1/10/Twister_with_his_arms_crossed.png/revision/latest/scale-to-width-down/340?cb=20160417053939\"></img>\n                </div>\n                <div className=\"col-md-4\">\n                    <img onClick={props.incrementButton} id=\"image9\" alt=\"...\" className=\"cartoonImg\" src=\"https://vignette.wikia.nocookie.net/rocketpower/images/2/25/Reggie_Rocket4.png/revision/latest/scale-to-width-down/340?cb=20150701021115\"></img>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CardBody;","import React, { Component } from 'react';\nimport NavBar from \"./components/navbar\";\nimport './App.css';\nimport Jumbotron from \"./components/jumbotron\";\nimport Cards from \"./components/cards\";\n\nclass Counter extends Component {\n  state = {\n    counter: 0,\n    totalCounter: 0,\n    clicked: {\n      image1: false,\n      image2: false,\n      image3: false,\n      image4: false,\n      image5: false,\n      image6: false,\n      image7: false,\n      image8: false,\n      image9: false\n    }\n  }\n\n  clickedFunction = (id) => {\n    const {clicked} = this.state;\n    console.log(id);\n    if (clicked[id]) {\n      this.resetGame();\n    } else {\n      clicked[id] = true;\n      console.log(clicked[id]);\n      this.setState({clicked: clicked});\n    }\n    \n  }\n\n  resetGame = () => {\n    this.setState({\n      counter: 0,\n      clicked: {\n        image1: false,\n        image2: false,\n        image3: false,\n        image4: false,\n        image5: false,\n        image6: false,\n        image7: false,\n        image8: false,\n        image9: false\n      }\n    })\n  }\n\n  incrementButton = (e) => {\n    const {id} = e.target;\n    const {totalCounter} = this.state;\n    this.setState({counter: this.state.counter + 1}, function() {\n      const {counter, clicked} = this.state;\n      if (counter >= totalCounter && !clicked[id]) {\n        this.setState({totalCounter: counter})\n      }\n      this.clickedFunction(id);\n    })\n    \n  }\n\n  // totalIncrement = () => {\n  //   this.setState({totalCounter: this.state.totalCounter + 1})\n  // }\n  \n  render () {\n    return (\n      <div>\n        <NavBar />\n        <Jumbotron\n        counter={this.state.counter}\n        totalCounter={this.state.totalCounter}\n        />\n        <div className=\"container\">\n          <Cards\n          incrementButton={this.incrementButton}\n          clickedFunction={this.clickedFunction}\n          clicked={this.state.clicked}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default Counter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}